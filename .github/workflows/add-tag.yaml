name: Tag Latest UI

# Trigger this workflow on any push to the 'latest-ui' branch.
on:
  push:
    branches:
      - main

jobs:
  tag:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code to the GitHub Actions runner.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up the Node.js environment.
      # This ensures that the correct version of Node.js (22.5 in this case) is used.
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.5' # Adjust this to the required version of Node.js for your project

      # Step 3: Get the current version from the 'package.json' file.
      # 'jq' is used to read the 'version' field from 'package.json', and it's saved to an environment variable.
      - name: Get current version from package.json
        id: get_version
        run: |
          # Use jq to extract the version field from package.json.
          # The -r flag ensures that the result is output as a raw string (without quotes).
          # The extracted version is stored in the current_version variable.
          current_version=$(jq -r '.version' package.json)

          echo "Current version: $current_version"
          echo "current_version=$current_version" >> $GITHUB_ENV

      # Step 4: Increment the version number following the 'major.minor.patch' format.
      # The patch is incremented if it's less than 9. If it's already 9, the patch is reset to 0,
      # and the minor version is incremented. If both patch and minor reach 9, the major version is incremented.
      - name: Increment version
        id: increment_version
        run: |
          current_version=${{ env.current_version }}
          # Extract major, minor, and patch from the current version string.
          # cut is used to split the string, -d. is delimter, f1, f2, f3 are parts of the splited version string
          major=$(echo $current_version | cut -d. -f1)
          minor=$(echo $current_version | cut -d. -f2)
          patch=$(echo $current_version | cut -d. -f3)

          # Increment the patch version if it's less than 9, otherwise reset patch and increment minor.
          if [ "$patch" -lt 9 ]; then
            patch=$((patch+1))
          else
            patch=0
            if [ "$minor" -lt 9 ]; then
              minor=$((minor+1))
            else
              minor=0
              major=$((major+1)) # Increment major only when both patch and minor reset.
            fi
          fi

          # Create the new version string.
          new_version="$major.$minor.$patch"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      # Step 5: Update the 'package.json' file with the new version number.
      # 'jq' is used again to write the updated version back to 'package.json'.
      - name: Update version in package.json
        run: |
          new_version=${{ env.new_version }}
          # Use jq to update the version field in package.json with the new version.
          # The new version is stored in the variable $new_version.
          # The output is redirected to a temporary file (package.json.tmp) to avoid directly editing package.json.
          # If the jq command is successful, move (rename) package.json.tmp to package.json,
          # replacing the original package.json with the updated version.
          jq ".version = \"$new_version\"" package.json > package.json.tmp && mv package.json.tmp package.json


      # Step 6: Commit the updated 'package.json' file to the 'latest-ui' branch.
      # This step configures git locally using the actor's details, adds the updated file, and commits it.
      - name: Commit updated package.json
        run: |
          git config --local user.name "${{ github.actor }}"
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"
          git add package.json
          git commit -m "Tag version ${{ env.new_version }} added successfully"

      # Step 7: Push the committed changes back to the 'latest-ui' branch.
      - name: Push changes
        run: git push origin latest-ui

      # Step 8: Create a new Git tag with the updated version number.
      # This step tags the commit with the new version and pushes the tag to the repository.
      - name: Create Git tag
        run: |
          new_version=${{ env.new_version }}
          git tag "$new_version"
          git push origin "$new_version"
          echo "$new_version added successfully"